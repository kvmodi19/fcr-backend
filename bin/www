#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('backend:server');
const http = require('http');
const mongoose = require('mongoose');

const config = require('../config');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

mongoose.connect(config.mongoUrl, function (err) {
	if (err) return console.log('error while connecting to db', err);
	console.log('connected to database');
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

let io = require('socket.io').listen(server);

io.on('connection', (socket) => {

	socket.on('disconnect', function () {
		io.emit('users-changed', { user: socket.nickname, event: 'left' });
	});

	socket.on('set-user', (nickname) => {
		socket.nickname = nickname;
		io.emit('users-changed', { user: nickname, event: 'joined' });
	});

	socket.on('add-message', (message) => {
		io.emit('message', { text: message.text, from: socket.nickname, created: new Date() });
	});
	console.log('socket connected');
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

	if (isNaN(port)) {
		// named pipe
		return val;
	}

	if (port >= 0) {
		// port number
		return port;
	}

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	const bind = typeof port === 'string'
		? 'Pipe ' + port
		: 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
		? 'pipe ' + addr
		: 'port ' + addr.port;
	debug('Listening on ' + bind);
	console.log('Listening on ' + bind);
}
